---
components:
  # jaeger tracing format
  - id: jaeger-format
    name: Jaeger Format
    description: The Jaeger Format defines a tracing format based on <a href="https://github.com/jaegertracing/jaeger-idl/tree/master/thrift">Jaeger Thrift</a> and <a href="https://developers.google.com/protocol-buffers">Protobuf</a>. Besides Jaeger itself, there are many other tools that support the Jaeger Tracing Format.
    link: https://www.jaegertracing.io/docs/1.16/apis/
    github:
      - jaegertracing/jaeger
    twitter: JaegerTracing
    logo: jaeger
    license:
      - Apache License 2.0
    categories:
      - format
    capabilities:
      aspects:
        - tracing

  # jaeger client
  - id: jaeger-client
    name: Jaeger Client
    description: Jaeger clients are language specific implementations of the OpenTracing API. They can be used to instrument applications for distributed tracing either manually or with a variety of existing open source frameworks.
    link: http://www.jaegertracing.io/
    github:
      - jaegertracing/jaeger-client-java
      - jaegertracing/jaeger-client-python
      - jaegertracing/jaeger-client-node
      - jaegertracing/jaeger-client-csharp
      - jaegertracing/jaeger-client-cpp
      - jaegertracing/jaeger-client-go
    twitter: JaegerTracing
    logo: jaeger
    license:
      - Apache License 2.0
    categories:
      - instrumentation-lib
    capabilities:
      tech:
        - java
        - go
        - nodejs
        - python
        - c++
        - .net
      aspects:
        - tracing [app]
        - tracing [eum]
      frameworks:
        - spring
        - jdbc
        - ldap
    connections:
      dataFrom:
        - opentracing
      includesTo:
        - jaeger-format
  
  # jaeger agent
  - id: jaeger-agent
    name: Jaeger Agent
    description: The Jaeger agent is a network daemon that listens for spans sent over UDP, which it batches and sends to the collector. It is designed to be deployed to all hosts as an infrastructure component. The agent abstracts the routing and discovery of the collectors away from the client.
    link: http://www.jaegertracing.io/
    github:
      - jaegertracing/jaeger
    twitter: JaegerTracing
    logo: jaeger
    license:
      - Apache License 2.0
    categories:
      - agent
    capabilities:
      aspects:
        - tracing [app]
        - tracing [eum]
    connections:
      includesFrom:
        - jaeger-format
      includesTo:
        - jaeger-format

  # jaeger Collector
  - id: jaeger-collector
    name: Jaeger Collector
    description: The Jaeger collector receives traces from Jaeger agents and runs them through a processing data-processing. Currently the data-processing validates traces, indexes them, performs any transformations, and finally stores them.
    link: http://www.jaegertracing.io/
    github:
      - jaegertracing/jaeger
    twitter: JaegerTracing
    logo: jaeger
    license:
      - Apache License 2.0
    categories:
      - collector
    connections:
      includesFrom:
        - jaeger-format
        - zipkin-format
      dataTo:
        - cassandra
        - elasticsearch
        - kafka
    capabilities:
      aspects:
        - tracing

  # jaeger Ingester
  - id: jaeger-ingester
    name: Jaeger Ingester
    description: The Jaeger Ingester is a service which reads span data from Kafka topic and writes it to another storage backend
    link: http://www.jaegertracing.io/
    github:
      - jaegertracing/jaeger
    twitter: JaegerTracing
    logo: jaeger
    license:
      - Apache License 2.0
    categories:
      - collector
    connections:
      dataTo:
        - cassandra
        - elasticsearch
      dataFrom:
        - kafka
    capabilities:
      aspects:
        - tracing

  # jaeger query and UI
  - id: jaeger-query
    name: Jaeger Query and UI
    description: Query is a service that retrieves traces from storage and hosts a UI to display them.
    link: http://www.jaegertracing.io/
    github:
      - jaegertracing/jaeger-ui
    twitter: JaegerTracing
    logo: jaeger
    license:
      - Apache License 2.0
    categories:
      - visualization
    connections:
      dataFrom:
        - cassandra
        - elasticsearch
        - jaeger-collector
      dataTo:
        - grafana
    capabilities:
      aspects:
        - tracing

